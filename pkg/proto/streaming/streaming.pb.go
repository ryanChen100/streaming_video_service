// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.3
// source: streaming/streaming.proto

package streaming

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UploadVideo 請求消息，使用 oneof 區分元資料與檔案塊
type UploadVideoReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*UploadVideoReq_Metadata
	//	*UploadVideoReq_Chunk
	Data          isUploadVideoReq_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadVideoReq) Reset() {
	*x = UploadVideoReq{}
	mi := &file_streaming_streaming_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadVideoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVideoReq) ProtoMessage() {}

func (x *UploadVideoReq) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVideoReq.ProtoReflect.Descriptor instead.
func (*UploadVideoReq) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{0}
}

func (x *UploadVideoReq) GetData() isUploadVideoReq_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadVideoReq) GetMetadata() *VideoMetadata {
	if x != nil {
		if x, ok := x.Data.(*UploadVideoReq_Metadata); ok {
			return x.Metadata
		}
	}
	return nil
}

func (x *UploadVideoReq) GetChunk() *VideoChunk {
	if x != nil {
		if x, ok := x.Data.(*UploadVideoReq_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

type isUploadVideoReq_Data interface {
	isUploadVideoReq_Data()
}

type UploadVideoReq_Metadata struct {
	// 當第一次發送時，傳送影片的元資料
	Metadata *VideoMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type UploadVideoReq_Chunk struct {
	// 隨後發送檔案內容塊
	Chunk *VideoChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadVideoReq_Metadata) isUploadVideoReq_Data() {}

func (*UploadVideoReq_Chunk) isUploadVideoReq_Data() {}

// 影片元資料：上傳時的標題、描述與影片類型
type VideoMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // "short" 或 "long"
	FileName      string                 `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"` // "short" 或 "long"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoMetadata) Reset() {
	*x = VideoMetadata{}
	mi := &file_streaming_streaming_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMetadata) ProtoMessage() {}

func (x *VideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMetadata.ProtoReflect.Descriptor instead.
func (*VideoMetadata) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{1}
}

func (x *VideoMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VideoMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VideoMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VideoMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// 影片內容塊，分段傳送檔案數據
type VideoChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoChunk) Reset() {
	*x = VideoChunk{}
	mi := &file_streaming_streaming_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChunk) ProtoMessage() {}

func (x *VideoChunk) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChunk.ProtoReflect.Descriptor instead.
func (*VideoChunk) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{2}
}

func (x *VideoChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// UploadVideo 的回應消息
type UploadVideoRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	VideoId       int64                  `protobuf:"varint,3,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadVideoRes) Reset() {
	*x = UploadVideoRes{}
	mi := &file_streaming_streaming_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadVideoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVideoRes) ProtoMessage() {}

func (x *UploadVideoRes) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVideoRes.ProtoReflect.Descriptor instead.
func (*UploadVideoRes) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{3}
}

func (x *UploadVideoRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadVideoRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UploadVideoRes) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

type GetVideoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VideoId       string                 `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoReq) Reset() {
	*x = GetVideoReq{}
	mi := &file_streaming_streaming_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoReq) ProtoMessage() {}

func (x *GetVideoReq) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoReq.ProtoReflect.Descriptor instead.
func (*GetVideoReq) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{4}
}

func (x *GetVideoReq) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type GetVideoRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	VideoId       int64                  `protobuf:"varint,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	HlsUrl        string                 `protobuf:"bytes,4,opt,name=hls_url,json=hlsUrl,proto3" json:"hls_url,omitempty"`
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoRes) Reset() {
	*x = GetVideoRes{}
	mi := &file_streaming_streaming_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoRes) ProtoMessage() {}

func (x *GetVideoRes) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoRes.ProtoReflect.Descriptor instead.
func (*GetVideoRes) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{5}
}

func (x *GetVideoRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetVideoRes) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *GetVideoRes) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetVideoRes) GetHlsUrl() string {
	if x != nil {
		return x.HlsUrl
	}
	return ""
}

func (x *GetVideoRes) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SearchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyWord       string                 `protobuf:"bytes,1,opt,name=key_word,json=keyWord,proto3" json:"key_word,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchReq) Reset() {
	*x = SearchReq{}
	mi := &file_streaming_streaming_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReq) ProtoMessage() {}

func (x *SearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReq.ProtoReflect.Descriptor instead.
func (*SearchReq) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{6}
}

func (x *SearchReq) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

type SearchRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Video         []*SearchFeedBack      `protobuf:"bytes,3,rep,name=video,proto3" json:"video,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRes) Reset() {
	*x = SearchRes{}
	mi := &file_streaming_streaming_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRes) ProtoMessage() {}

func (x *SearchRes) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRes.ProtoReflect.Descriptor instead.
func (*SearchRes) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{7}
}

func (x *SearchRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SearchRes) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SearchRes) GetVideo() []*SearchFeedBack {
	if x != nil {
		return x.Video
	}
	return nil
}

type SearchFeedBack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VideoId       int64                  `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FileName      string                 `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`                        // 存於 MinIO 上的 object key
	Type          string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                // "short" 或 "long"
	Status        string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`                            // "uploaded", "processing", "ready"
	ViewCCount    int64                  `protobuf:"varint,7,opt,name=view_cCount,json=viewCCount,proto3" json:"view_cCount,omitempty"` // 瀏覽次數
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchFeedBack) Reset() {
	*x = SearchFeedBack{}
	mi := &file_streaming_streaming_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchFeedBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFeedBack) ProtoMessage() {}

func (x *SearchFeedBack) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFeedBack.ProtoReflect.Descriptor instead.
func (*SearchFeedBack) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{8}
}

func (x *SearchFeedBack) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *SearchFeedBack) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchFeedBack) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SearchFeedBack) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SearchFeedBack) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SearchFeedBack) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchFeedBack) GetViewCCount() int64 {
	if x != nil {
		return x.ViewCCount
	}
	return 0
}

type GetRecommendationsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int64                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecommendationsReq) Reset() {
	*x = GetRecommendationsReq{}
	mi := &file_streaming_streaming_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecommendationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationsReq) ProtoMessage() {}

func (x *GetRecommendationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationsReq.ProtoReflect.Descriptor instead.
func (*GetRecommendationsReq) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{9}
}

func (x *GetRecommendationsReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRecommendationsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Video         []*SearchFeedBack      `protobuf:"bytes,3,rep,name=video,proto3" json:"video,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecommendationsRes) Reset() {
	*x = GetRecommendationsRes{}
	mi := &file_streaming_streaming_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecommendationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationsRes) ProtoMessage() {}

func (x *GetRecommendationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationsRes.ProtoReflect.Descriptor instead.
func (*GetRecommendationsRes) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{10}
}

func (x *GetRecommendationsRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetRecommendationsRes) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetRecommendationsRes) GetVideo() []*SearchFeedBack {
	if x != nil {
		return x.Video
	}
	return nil
}

// 用於取得 m3u8 播放清單的請求與回應
type GetIndexM3U8Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VideoId       string                 `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndexM3U8Req) Reset() {
	*x = GetIndexM3U8Req{}
	mi := &file_streaming_streaming_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndexM3U8Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexM3U8Req) ProtoMessage() {}

func (x *GetIndexM3U8Req) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexM3U8Req.ProtoReflect.Descriptor instead.
func (*GetIndexM3U8Req) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{11}
}

func (x *GetIndexM3U8Req) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type GetIndexM3U8Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Content       []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` // m3u8 檔案內容的二進位資料
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndexM3U8Res) Reset() {
	*x = GetIndexM3U8Res{}
	mi := &file_streaming_streaming_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndexM3U8Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexM3U8Res) ProtoMessage() {}

func (x *GetIndexM3U8Res) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexM3U8Res.ProtoReflect.Descriptor instead.
func (*GetIndexM3U8Res) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{12}
}

func (x *GetIndexM3U8Res) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetIndexM3U8Res) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetIndexM3U8Res) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// 用於取得 TS 分段檔案的請求與回應
type GetHlsSegmentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VideoId       string                 `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Segment       string                 `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHlsSegmentReq) Reset() {
	*x = GetHlsSegmentReq{}
	mi := &file_streaming_streaming_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHlsSegmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHlsSegmentReq) ProtoMessage() {}

func (x *GetHlsSegmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHlsSegmentReq.ProtoReflect.Descriptor instead.
func (*GetHlsSegmentReq) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{13}
}

func (x *GetHlsSegmentReq) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *GetHlsSegmentReq) GetSegment() string {
	if x != nil {
		return x.Segment
	}
	return ""
}

type GetHlsSegmentRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Content       []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` // TS 段檔案內容的二進位資料
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHlsSegmentRes) Reset() {
	*x = GetHlsSegmentRes{}
	mi := &file_streaming_streaming_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHlsSegmentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHlsSegmentRes) ProtoMessage() {}

func (x *GetHlsSegmentRes) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_streaming_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHlsSegmentRes.ProtoReflect.Descriptor instead.
func (*GetHlsSegmentRes) Descriptor() ([]byte, []int) {
	return file_streaming_streaming_proto_rawDescGZIP(), []int{14}
}

func (x *GetHlsSegmentRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetHlsSegmentRes) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetHlsSegmentRes) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_streaming_streaming_proto protoreflect.FileDescriptor

var file_streaming_streaming_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x7f, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2d, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x26, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x26, 0x0a,
	0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x57, 0x6f, 0x72, 0x64, 0x22, 0x6c, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x65,
	0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x43, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x65, 0x65, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x2c, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x33, 0x55, 0x38, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x33, 0x55, 0x38, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6c, 0x73,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x5c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6c, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0xb8, 0x03,
	0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x28, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x14, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4d, 0x33, 0x55, 0x38, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x33, 0x55, 0x38, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x33, 0x55, 0x38, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x48, 0x6c, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6c,
	0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6c, 0x73, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_streaming_streaming_proto_rawDescOnce sync.Once
	file_streaming_streaming_proto_rawDescData = file_streaming_streaming_proto_rawDesc
)

func file_streaming_streaming_proto_rawDescGZIP() []byte {
	file_streaming_streaming_proto_rawDescOnce.Do(func() {
		file_streaming_streaming_proto_rawDescData = protoimpl.X.CompressGZIP(file_streaming_streaming_proto_rawDescData)
	})
	return file_streaming_streaming_proto_rawDescData
}

var file_streaming_streaming_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_streaming_streaming_proto_goTypes = []any{
	(*UploadVideoReq)(nil),        // 0: streaming.UploadVideoReq
	(*VideoMetadata)(nil),         // 1: streaming.VideoMetadata
	(*VideoChunk)(nil),            // 2: streaming.VideoChunk
	(*UploadVideoRes)(nil),        // 3: streaming.UploadVideoRes
	(*GetVideoReq)(nil),           // 4: streaming.GetVideoReq
	(*GetVideoRes)(nil),           // 5: streaming.GetVideoRes
	(*SearchReq)(nil),             // 6: streaming.SearchReq
	(*SearchRes)(nil),             // 7: streaming.SearchRes
	(*SearchFeedBack)(nil),        // 8: streaming.SearchFeedBack
	(*GetRecommendationsReq)(nil), // 9: streaming.GetRecommendationsReq
	(*GetRecommendationsRes)(nil), // 10: streaming.GetRecommendationsRes
	(*GetIndexM3U8Req)(nil),       // 11: streaming.GetIndexM3U8Req
	(*GetIndexM3U8Res)(nil),       // 12: streaming.GetIndexM3U8Res
	(*GetHlsSegmentReq)(nil),      // 13: streaming.GetHlsSegmentReq
	(*GetHlsSegmentRes)(nil),      // 14: streaming.GetHlsSegmentRes
}
var file_streaming_streaming_proto_depIdxs = []int32{
	1,  // 0: streaming.UploadVideoReq.metadata:type_name -> streaming.VideoMetadata
	2,  // 1: streaming.UploadVideoReq.chunk:type_name -> streaming.VideoChunk
	8,  // 2: streaming.SearchRes.video:type_name -> streaming.SearchFeedBack
	8,  // 3: streaming.GetRecommendationsRes.video:type_name -> streaming.SearchFeedBack
	0,  // 4: streaming.StreamingService.UploadVideo:input_type -> streaming.UploadVideoReq
	4,  // 5: streaming.StreamingService.GetVideo:input_type -> streaming.GetVideoReq
	6,  // 6: streaming.StreamingService.Search:input_type -> streaming.SearchReq
	9,  // 7: streaming.StreamingService.GetRecommendations:input_type -> streaming.GetRecommendationsReq
	11, // 8: streaming.StreamingService.GetIndexM3U8:input_type -> streaming.GetIndexM3U8Req
	13, // 9: streaming.StreamingService.GetHlsSegment:input_type -> streaming.GetHlsSegmentReq
	3,  // 10: streaming.StreamingService.UploadVideo:output_type -> streaming.UploadVideoRes
	5,  // 11: streaming.StreamingService.GetVideo:output_type -> streaming.GetVideoRes
	7,  // 12: streaming.StreamingService.Search:output_type -> streaming.SearchRes
	10, // 13: streaming.StreamingService.GetRecommendations:output_type -> streaming.GetRecommendationsRes
	12, // 14: streaming.StreamingService.GetIndexM3U8:output_type -> streaming.GetIndexM3U8Res
	14, // 15: streaming.StreamingService.GetHlsSegment:output_type -> streaming.GetHlsSegmentRes
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_streaming_streaming_proto_init() }
func file_streaming_streaming_proto_init() {
	if File_streaming_streaming_proto != nil {
		return
	}
	file_streaming_streaming_proto_msgTypes[0].OneofWrappers = []any{
		(*UploadVideoReq_Metadata)(nil),
		(*UploadVideoReq_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_streaming_streaming_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_streaming_streaming_proto_goTypes,
		DependencyIndexes: file_streaming_streaming_proto_depIdxs,
		MessageInfos:      file_streaming_streaming_proto_msgTypes,
	}.Build()
	File_streaming_streaming_proto = out.File
	file_streaming_streaming_proto_rawDesc = nil
	file_streaming_streaming_proto_goTypes = nil
	file_streaming_streaming_proto_depIdxs = nil
}
